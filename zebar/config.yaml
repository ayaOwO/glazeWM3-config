# Yaml is white-space sensitive (use 2 spaces to indent).

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ['self']
  # Width of the window in physical pixels.
  width: '{{ Number(self.args.MONITOR_WIDTH) - 20}}'
  # Height of the window in physical pixels.
  height: '40'
  # X-position of the window in physical pixels.
  position_x: '{{ Number(self.args.MONITOR_X)  + 10}}'
  # Y-position of the window in physical pixels.
  position_y: '{{ Number(self.args.MONITOR_Y) + 10}}'
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: 'normal'
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    --Rosewater: #f4dbd6;

    --Flamingo: #f0c6c6;
      

    --Pink: #f5bde6;
    

    --Mauve: #c6a0f6;
    

    --Red: #ed8796;
    

    --Maroon: #ee99a0;
    

    --Peach: #f5a97f;
    

    --Yellow: #eed49f;
    

    --Green: #a6da95;
    

    --Teal: #8bd5ca;
    

    --Sky: #91d7e3;
    

    --Sapphire: #7dc4e4;
    

    --Blue: #8aadf4;
    

    --Lavender: #b7bdf8;
    

    --Text: #cad3f5;
      

    --Subtext-1: #b8c0e0;
      

    --Subtext-0: #a5adcb;
      

    --Overlay-2: #939ab7;
      

    --Overlay-1: #8087a2;
      

    --Overlay-0: #6e738d;
      

    --Surface-2: #5b6078;
      

    --Surface-1: #494d64;
      

    --Surface-0: #363a4f;
      

    --Base: #24273a;
      

    --Mantle: #1e2030;
      

    --Crust: #181926;

    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
    height: 100%;
    color: var(--Text);
    font-family: NerdFontsSymbols Nerd Font, ui-monospace, monospace;
    font-size: 16px;
    padding: 0 8px;
    background: linear-gradient(var(--Base), var(--Surface-0));
    border-radius: 10px;


    i {
      margin-right: 8px;
    }

  group/left:
    styles: |
      display: flex;
      align-items: center;

    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: center;

        .workspace {
          background: var(--Surface-1);
          margin-right: 4px;
          padding: 4px 8px;
          color: inherit;
          border: none;
          border-radius: 5px;
          cursor: pointer;

          &.displayed {
            &:after { content:" 󰄛" };
          }

          &.focused,
          &:hover {
            color: var(--Pink);
          }
        }
      providers: ['glazewm']
      events:
        - type: 'click'
          fn_path: 'script.js#focusWorkspace'
          selector: '.workspace'
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            {{ workspace.displayName ?? workspace.name }}
          </button>
        }
    template/title:
      styles: |
        color: var(--Rosewater)
      providers: ['glazewm']
      template: |
        @if ( glazewm.focusedContainer.type === 'window') {
          <span class="current-window"> {{ glazewm.focusedContainer.title }} </span>
        } @else {
          <span class="current-window"></span>
        }
  group/center:
    styles: |
      justify-self: center;
      color: var(--Mauve);

    template/clock:
      providers: ['date']
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
        {{ date.toFormat(date.now, 'EEE	d MMM t') }}

  group/right:
    styles: |
      justify-self: end;
      display: flex;

      .template {
        margin-left: 20px;
      }

    template/glazewm_other:
      providers: ['glazewm']
      styles: |
        .binding-mode,
        .tiling-direction {
          background: var(--Surface-1);
          border-radius: 2px;
          padding: 4px 6px;
          margin: 0;
        }
        color: var(--Maroon);

      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <span class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </span>
        }

        @if (glazewm.tilingDirection === 'horizontal') {
          <i class="tiling-direction nf nf-md-swap_horizontal"></i>
        } @else {
          <i class="tiling-direction nf nf-md-swap_vertical"></i>
        }

    template/network:
      providers: ['network']
      styles: | 
        i {
          color: var(--Yellow);
        }
      template: |
        <!-- Show icon based on signal strength. -->
        @if (network.defaultInterface?.type === 'ethernet') {
          <i class="nf nf-md-ethernet_cable"></i>
        } @else if (network.defaultInterface?.type === 'wifi') {
          @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
          @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
          @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
          @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
          @else {<i class="nf nf-md-wifi_strength_outline"></i>}
          {{ network.defaultGateway?.ssid }}
        } @else {
          <i class="nf nf-md-wifi_strength_off_outline"></i>
        }

    template/memory:
      providers: ['memory']
      styles: |
        i {
          color: var(--Green);
        }
      template: |
        <i class="nf nf-fae-chip"></i>
        {{ Math.round(memory.usage) }}%

    template/cpu:
      providers: ['cpu']
      styles: |
        .high-usage {
          color: var(--Red);
        }
        i {
          color: var(--Teal)
        }
      template: |
        <i class="nf nf-oct-cpu"></i>

        <!-- Change the text color if the CPU usage is high. -->
        @if (cpu.usage > 85) {
          <span class="high-usage">{{ Math.round(cpu.usage) }}%</span>
        } @else {
          <span>{{ Math.round(cpu.usage) }}%</span>
        }

    template/weather:
      styles: |
        i {
          color: var(--Sky);
        }
      providers: ['weather']
      template: |
        @switch (weather.status) {
          @case ('clear_day') {<i class="nf nf-weather-day_sunny"></i>}
          @case ('clear_night') {<i class="nf nf-weather-night_clear"></i>}
          @case ('cloudy_day') {<i class="nf nf-weather-day_cloudy"></i>}
          @case ('cloudy_night') {<i class="nf nf-weather-night_alt_cloudy"></i>}
          @case ('light_rain_day') {<i class="nf nf-weather-day_sprinkle"></i>}
          @case ('light_rain_night') {<i class="nf nf-weather-night_alt_sprinkle"></i>}
          @case ('heavy_rain_day') {<i class="nf nf-weather-day_rain"></i>}
          @case ('heavy_rain_night') {<i class="nf nf-weather-night_alt_rain"></i>}
          @case ('snow_day') {<i class="nf nf-weather-day_snow"></i>}
          @case ('snow_night') {<i class="nf nf-weather-night_alt_snow"></i>}
          @case ('thunder_day') {<i class="nf nf-weather-day_lightning"></i>}
          @case ('thunder_night') {<i class="nf nf-weather-night_alt_lightning"></i>}
        }
        {{ weather.celsiusTemp }}°
